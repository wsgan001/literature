% Encoding: UTF-8

<div class="small-text" align="right" style="margin-right:10px">
	
	BibTeX |
    
    <a href="javascript:ColdFusion.Window.show('theformats');ColdFusion.navigate('exportformats.cfm?id=2886012&expformat=endnotes','theformats');" >EndNote</a>  |  
    
    <a href="javascript:ColdFusion.Window.show('theformats');ColdFusion.navigate('exportformats.cfm?id=2886012&expformat=acmref','theformats');" >ACM Ref</a>
    
</div>

<PRE id="2886012">

@Article{Obfuscation,
  author        = {Schrittwieser, Sebastian and Katzenbeisser, Stefan and Kinder, Johannes and Merzdovnik, Georg and Weippl, Edgar},
  title         = {Protecting Software Through Obfuscation Can It Keep Pace with Progress in Code Analysis?},
  year          = {2016},
  volume        = {49},
  number        = {1},
  pages         = {41--437},
  month         = apr,
  __markedentry = {[x:6]},
  acmid         = {2886012},
  articleno     = {4},
  doi           = {10.1145/2886012},
  file          = {Obfuscation.pdf:Obfuscation.pdf:PDF},
  issn          = {0360-0300},
  issue_date    = {July 2016},
  journaltitle  = {ACM Comput. Surv.},
  keywords      = {Software obfuscation, malware, program analysis, reverse engineering, software protection, rank5},
  location      = {New York, NY, USA},
  numpages      = {37},
  publisher     = {ACM},
  review        = {代码混淆综述},
}

@Article{KaziZakiaSultana2016,
  author   = {Kazi Zakia Sultana},
  title    = {A Preliminary Study Examining Relationships Between Nano-Patterns and Software Security Vulnerabilities},
  journal  = {2016 IEEE 40th Annual Computer Software and Applications Conference},
  year     = {2016},
  abstract = {security plays a significant role in ensuring software quality. The goal of this study is to conduct a preliminary analysis to find hidden relationships between source code patterns, Abstract—Software and security defects. We describe a study in which we focus on evaluating software security using nano-patterns to reduce security risks during the development lifecycle. Nano-patterns are simple properties of Java methods. In our research, we investigate the correlation between software vulnerabilities and nano-patterns using data mining techniques. Identifying these relationships can assist developers to quickly assess the likelihood that they are writing vulnerable code and recommend tests to uncover the vulnerability. The goal of this research is to reduce the amount of vulnerable code developers write. We successfully apply data mining techniques to identify vulnerable code characteristics and apply hypothesis testing to validate the findings. This preliminary study shows that certain nano-patterns localReader, jdkClient, tailCaller are significantly present in vulnerable methods. These findings can be used to recommend security test patterns to improve vulnerability testing and reduce the number of vulnerabilities in released code.},
  file     = {KaziZakiaSultana2016.pdf:KaziZakiaSultana2016.pdf:PDF},
}

@Article{316CACMChinaRA,
  author   = {BOAZ BARAK},
  title    = {希望，恐惧和软件混淆},
  journal  = {ACM 通讯},
  year     = {2016},
  file     = {316CACMChinaRA.pdf:316CACMChinaRA.pdf:PDF},
  keywords = {rank1},
  review   = {密码学角度 虚拟黑盒概念的提出},
}

@Article{网络空间安全综述,
  author   = {张焕国, 韩文报, 来学嘉, 林东岱, 马建峰, 李建华},
  title    = {网络空间安全综述 5.3},
  journal  = {中国科学 : 信息科学},
  year     = {2016},
  abstract = {随着信息技术的发展与广泛应用, 人类社会进入信息化时代. 在信息时代, 人们生活和工作在
网络空间中. 网络空间是所有信息系统的集合, 是人类生存的信息环境. 因此, 必须确保网络空间的
安全. 本文综合介绍网络空间的概念、网络空间安全学科、密码学、网络安全、信息系统安全和信息
内容安全领域的研究发展、存在的问题和一些研究热点.},
  file     = {网络空间安全综述.pdf:网络空间安全综述.pdf:PDF},
  keywords = {rank1},
  review   = {软件安全威胁包括拒绝服务、隐私泄漏、权限提升、恶意代码执行、功能误用
5.3节从软件角度介绍了软件安全问题，可以参考},
}

@Article{安全的程序混淆研究综述,
  author   = {成荣，张方国},
  title    = {安全的程序混淆研究综述},
  journal  = {技术研究},
  year     = {2014},
  abstract = {程序混淆可以理解为一个编译器，它将源程序转化成一种不被理解的形式，但
依然保持其功能特性。混淆的概念最早在代码混淆领域被提出，在软件保护、数字水印等领
域有着实际的应用，但缺乏严格的安全分析与证明。混淆在密码学领域的研究最早由 Barak
等人引入，并提出了虚拟黑盒混淆的形式化定义及安全性要求。对密码函数的安全通用混淆
研究具有非常重要的理论意义，其与随机预言机、全同态加密、零知识证明等其他密码原语
有着紧密的联系。对具体密码函数的安全混淆在云计算、代理计算等领域也有着实际的应用
价值。近年来，安全的程序混淆研究成为当前密码研究领域的一个热点。由于在 Barak 提出
的标准定义下已证明不存在通用的安全混淆，因此后续的程序混淆方面的研究工作主要集中
在 3 个方面 ：对具体函数类的混淆实现、混淆的新模型研究以及混淆与其他密码模型的关系
研究及应用。文章给出了安全的程序混淆的一个研究综述，对对具体函数类的安全混淆、混
淆模型的研究以及混淆的推广和应用都分别给出了一个较为详细的介绍。},
  file     = {安全的程序混淆研究综述.pdf:安全的程序混淆研究综述.pdf:PDF},
}

@Article{博士论文谢鑫,
  author   = {谢鑫},
  title    = {面向逆向分析的程序关键属性混淆技术研究},
  journal  = {博士论文},
  year     = {2015},
  file     = {博士论文谢鑫.pdf:博士论文谢鑫.pdf:PDF},
  keywords = {rank5},
}

@Article{软件分析技术进展_梅宏,
  author   = {梅宏,王千祥,张 路,王 戟},
  title    = {软件分析技术进展},
  journal  = {计算机学报},
  year     = {2009},
  abstract = {软件分析技术的研究已有较长历史 , 相关成果也在软件生命周期的不同阶段中得到了广泛应用 . 软件生
命周期中不同活动所需要的软件分析技术既不完全相同 , 又有许多交叠 , 且不同的分析技术之间互相影响 . 文章在
讨论了软件分析的基本概念之后 , 主要从静态分析与动态分析两个方面介绍了一些主要的软件分析技术以及部分
相关分析工具 . 结合软件的质量问题 , 文章还探讨了一些分析技术与软件质量属性的相关性 , 以便于人们在分析特
定的软件质量属性时 , 选取合适的技术与工具 . 最后 , 文章展望了软件分析技术的发展趋势 .},
  file     = {软件分析技术进展_梅宏.pdf:软件分析技术进展_梅宏.pdf:PDF},
  groups   = {程序分析},
  keywords = {software analysis, static analysis, dynamic analysis, software quality, rank2},
  review   = {software analysis综述性文章:对各流派分析方法做了说明},
}

@Article{反堆栈,
  author   = {谢鑫},
  title    = {Random table and hash coding-based binary code obfuscation against stack trace analysis 随机表和基于哈希编码的二进制代码混淆反对堆栈跟踪分析},
  journal  = {IET Information Security},
  year     = {2016},
  abstract = {代码混淆旨在通过使程序难以理解来阻止逆向工程。通过堆栈跟踪收集的调用链可用于了解程序的行为。
为了阻碍堆栈跟踪的反向分析，提出了基于随机混淆表和哈希编码的二进制代码混淆方法。
随机模糊表用于在执行调用和ret指令时映射调用地址。哈希编码和随机值可用于编码和解码运行时程序中堆栈帧的数据。
实验和分析表明，混淆可以有效地阻止堆栈跟踪分析，并增加程序的反向分析的成本。},
  file     = {反堆栈.pdf:反堆栈.pdf:PDF},
  keywords = {rank5},
  review   = {反堆栈追踪
混淆通过堆栈跟踪获得的调用链,提出了基于随机混淆表和哈希编码的二进制代码混淆技术},
}

@Article{p88-barak,
  author  = {BOAZ BARAK},
  title   = {Hopes, Fears,and Software Obfuscation},
  journal = {ACM 通讯},
  year    = {2016},
  file    = {p88-barak.pdf:p88-barak.pdf:PDF},
}

@Article{毕业论文-南开马昊玉,
  author  = {马昊玉},
  title   = {针对恶意逆向工程的软件知识产权保护新方法研究},
  journal = {博士学位论文},
  year    = {2016},
  file    = {毕业论文-南开马昊玉.pdf:毕业论文-南开马昊玉.pdf:PDF},
}

@Article{恶意代码反分析与分析综述_高玉新,
  author   = {高玉新，张怡，唐勇，卢泽新},
  title    = {恶意代码反分析与分析综述},
  journal  = {小型微型计算机系统},
  year     = {2015},
  abstract = {恶意代码反分析与分析技术一直都是计算机安全领域的对抗焦点． 恶意代码通过反静态分析和反动态分析两个方面
对自身进行保护: 反静态分析使用加壳和代码混淆的方法，对反汇编和控制流识别进行干扰; 反动态分析检测系统运行环境信
息，实现对调试器、 虚拟机的反跟踪． 与此相对应，分析者和反病毒软件使用脱壳、 反混淆及虚拟机技术避免反分析技术的干扰．
论文深入分析与总结了各种恶意代码反分析技术的实现原理，及与之相对的分析技术， 探讨了这些技术的优缺点与适用性， 为
恶意代码分析技术的发展提供了一些思路和技术方向．},
  file     = {恶意代码反分析与分析综述_高玉新.pdf:恶意代码反分析与分析综述_高玉新.pdf:PDF},
  keywords = {rank2},
  review   = {综述性介绍了加壳脱壳技术，代码混淆技术、信息隐藏技术},
}

@Article{nauman2016,
  author  = {Mohammad Nauman, Nouman Azam, JingTao Yao},
  title   = {A Three-way Decision Making Approach to Malware Analysis Using Probabilistic Rough Sets},
  journal = {Information Sciences},
  year    = {2016},
  file    = {nauman2016.pdf:nauman2016.pdf:PDF},
  review  = {在阳性阴性基础上增加延迟决定，构成三项决定
恶意软件分析旨在通过检查主机操作系统上的应用程序行为来识别恶意软件。 恶意软件分析中的常见问题是如何减轻和处理诸如假阳性的错误决策。 基于用于对应用行为分类的双向决定（例如接受和拒绝）的现有方法导致两个缺点。 首先，双向决定是僵硬和严格的，因为它们要求必须进行分类决策，而不考虑可用信息的质量。 当我们没有足够和完整的信息时，这可能导致错误的分类决定。
添加的延期决定选项提供了在我们没有足够信息时延迟某个决定的灵活性。 此外，它旨在通过确定决策的不同属性之间的权衡来减轻模型级别的假决定，例如准确性，一般性和不确定性。 我们在本研究中基于两个概率粗糙集模型，即游戏理论粗糙集（GTRS）和信息理论粗糙集（ITRS）来考虑三向决策。 提出了基于概率粗糙集的三路决策实现的恶意软件分析的架构。 提出了一种基于所提出的架构的称为顺序可堆叠linux安全（SSLS）的新算法。 来自UNM数据集的系统调用序列的实验结果主张在恶意软件分析中使用三向决策。},
}

@Article{程序多样性技术研究,
  author  = {辛知},
  title   = {程序多样性技术研究},
  journal = {博士论文},
  year    = {2013},
  file    = {:程序多样性技术研究.caj:PDF},
  review  = {2.2.2.2 介绍混淆技术  
静态混淆--控制流混淆、数据对象混淆、垃圾代码插入、代码加密：加壳与多态
静态混淆没有考虑程序特征},
}

@Article{基于数据特征的内核恶意软件检测_陈志锋,
  author   = {陈志锋,李清宝,张平,丁文博},
  title    = {基于数据特征的内核恶意软件检测},
  journal  = {软件学报},
  year     = {2016},
  abstract = {内核恶意软件对操作系统的安全造成了严重威胁.现有的内核恶意软件检测方法主要从代码角度出发,
无法检测代码复用、代码混淆攻击,且少量检测数据篡改攻击的方法因不变量特征有限导致检测能力受限.针对这
些问题,提出了一种基于数据特征的内核恶意软件检测方法,通过分析内核运行过程中内核数据对象的访问过程,构
建了内核数据对象访问模型;然后,基于该模型讨论了构建数据特征的过程,采用动态监控和静态分析相结合的方法
识别内核数据对象,利用 EPT 监控内存访问操作构建数据特征;最后讨论了基于数据特征的内核恶意软件检测算法.
在此基础上,实现了内核恶意软件检测原型系统 MDS-DCB,并通过实验评测 MDS-DCB 的有效性和性能.实验结果
表明:MDS-DCB 能够有效检测内核恶意软件,且性能开销在可接受的范围内},
  file     = {基于数据特征的内核恶意软件检测_陈志锋.pdf:基于数据特征的内核恶意软件检测_陈志锋.pdf:PDF},
  review   = {基于行为特征的检测方法通过分析指令序列或者系统调用序列特征,判定恶意软
件是否存在.为了规避这类方法的检测,攻击者引入了代码混淆技术
内核数据，控制数据与非控数据
控制数据保护：对函数指针、返回地址、系统调用表、中断向量表等进行保护和检测[13,16],有效确保了控制数据的完整性},
}

@Comment{jabref-meta: databaseType:bibtex;}
